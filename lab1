#location of array in memory 
   addi $s0, $zero, 4000

#load content in memory for experiment
   addi $s1, $zero, 5
   sw $s1, 0($s0)

   addi $s1, $zero, -8
   sw $s1, 4($s0)

#--------------------------------
#get values from array 
lw $s1, 0($s0)    #-5 -> $s1
lw $s2, 4($s0)    # 8 -> $s2

#multiply the values
mult $s1, $s2
mflo $s3   # Move the lower 32 bits of the result into $s3
mfhi $s4   # Move the upper 32 bits of the result into $s4

#store register content to memory
sw $s4, 8($s0)    #A[2]
sw $s3, 16($s0)   #A[4]

# operation A[5] = A[4] / 230;
#why doesnt li work
addi $s1, $zero, 230 #stores 230 into register $s1, 
lw $s2, 16($s0)

div $s2, $s1 # A[4] / 230
mflo $s3    #moves quotient into $s3
sw $s3, 20($s0)

#operation a = A[4] % 230;
div $s2, $s1 # A[4] / 230
mfhi $s1    #the remainder into $s1=a

# operation b = a >> 16; 
srl $s2, $s1, 16

#operation c = (a & 0b'1000) | (b | 0b'0011); 
addi $s3,$zero, 8 #0b'1000
addi $s4,$zero, 3 #0b'0011
and $s3, $s1, $s3 #(a & 0b'1000)
or $s4, $s2, $s4  #(b | 0b'0011)
or $s3, $s3, $s4

#operation d = a << 2; 
sll $s4, $s1, 2

#operation A[6] = {b, c, d};
sb $s2, 27($s0)   # b
sb $s3, 26($s0)   # c 
sh $s4, 24($s0)   # d 

#operation A[3] = (A[0] + A[1] - 100) - (A[2] + A[4] - A[5]);
   #(A[0] + A[1] - 100)
lw $s5, 0($s0) #A[0]
lw $s6, 4($s0) #A[1]
addi $s7, $zero, 100
add $s5, $s5, $s6
sub $s5, $s5, $s7

   #(A[2] + A[4] - A[5])
lw $s6, 8($s0)    #A[2]
lw $s7, 16($s0)   #A[4]  
add $s6, $s6, $s7 #(A[2] + A[4])
lw $s7, 20($s0)   #A[5]
sub $s6, $s6, $s7

   #A[3] = $s5 - $s6
sub $s5, $s5, $s6
sw $s5, 12($s0)
