#---------------preloaded registers---------------
#s0 is given as the head of the list
#s1 is given as the address of new node
#s2 is given as the place of insertion
#s3 is gicen as the value of new node
#-------------------------------------------------

#---------------Main Functionality---------------
# all it does is load the argument registers for
# addnode function, calls that function and stores
# the return value of addnode, into register s3
#-------------------------------------------------

Main:
				#loads arguments for the function call
add $a0, $s0, $zero		#a0 = head
add $a1, $s2, $zero		#a1 = n, place of insertion
add $a2, $s1, #zero		#a2 = address of newnode

jal addNode			#goes to the addNode function
				#returned newnode value that is stored in v0
add $s3, $v0, $zero		#setting the return value from the function into s3

j End				#jump to end the program

#--------------------addNode Functionality-----------------
# checks to see if n is 0 or head is null, if either
# is true then it jumps to Continue, there it just
# inserts newnode as the head and updates its next
# value to the previous head address
# if neither is true then we call the findNode function
# once returned we properly insert the newnode inbetween two 
# nodes and we return the value of newnode and go back 
#to main
#---------------------Arguments----------------------------
# a0= head
# a1= n
# a2= newnode address
#---------------------return value-------------------------
# v0= newnode contents
#---------------------used registers-----------------------
# when returning from findNode function is gives v0 and v1
# v0= address of a[n]
# v1= address of a[n+1]
#----------------------------------------------------------

addNode:

beq $zero, $a0, Continue 	#if head == null, we out this hoe
beq $zero, $a1, Continue 	#if n == 0, we out this hoe

							
addi $sp, $sp, -4		#reserves 1 word for return address in the stack
sw $ra, 0($sp)			#ra = return address to main into the stack

jal findNode			#call the findNode function

lw $ra, 0($sp)			#reload ra from the stack
addi $sp, $sp, 4		#liberate 1 word from the stack

sw $a2, 4($v0)			#a[n]->next = newnode
sw $v1, 4($a2)			#newnode->next = a[n+1]

lw $v0, 0($a2)			#load value from head, which will be the newnode

jr $ra				#return to main

Continue:

      sw $a0, 4($a2)		#newnode->next = head
      add $s0, $zero, $a2	#setting the head(from main s0) = newnode
      
      lw $v0, 0($a2)		#load value from newnode. 
      jr $ra			#return to main

#-------------------findNode Functionality-----------------
# all it does is literally traverses the nodes, till it arrives
# at n, which will be inbetween two nodes or when it reaches
# the end of the list. there it returns the address of a[n]
# and a[n+1] for the addnode function
#---------------------Arguments----------------------------
# a0= head
# a1 = n
#---------------------return value-------------------------
# v0 = address of a[n]
# v1 = address of a[n+1]
#---------------------used registers-----------------------
# t0 is reserved for branch conditions values, 1:0
# t1 is reserved for node*curr
# t2 is reserved for Int i
# t3 is used for the if statment current->next=0
#----------------------------------------------------------

findNode:
  addi $t1, $a0,0		#node* curr = head
  addi $t2, $zero, 1		#i = 1

forLoop:
  slt $t0, $t2, $a1		#t0 = i<n
  beq $t0, $zero, break		#if i>=n we out this hoe
  
  lw $t1, 4($t1)		#curr = curr->next
  
  beq $zero, $t1, break		#if 0==curr, we out this hoe
  
  lw $t3, 4($t1)		#loads curr->next into t5
  beq $t3, $zero, break		#if curr->next==0, we out this hoe
  
  addi $t2, $t2, 1		#i++
j forLoop

break:
add $v0, $zero, $t1       	#v0 = curr (a[n])
add $v1, $zero, $t3       	#v1 = curr->next (a[n+1])

jr $ra				#return to addNode

End:				#end of program
