#-------------------------------------
#s0 reserved for pointer address
#s1 reserved for array size
#s2 reserved for i
#s3 reserved for j
#s4 reserved for k
#t0 holds true:false(1:0) values for branches;
#t1 & t2 used for offsets of index, and values of A[index]
#t3 holds the value of size-1, during each loop iteration
#-------------------------------------

        addi $s2, $zero, 0               #initalizing i = 0

OutterWhileLoop:
        slt $t0, $s2, $s1                #i<size TvF
        beq $t0, $zero, Exit             # i>=size, we out this hoe
        
        addi $s3, $s2, 1                 #j=i+1
        
InnerWhileLoop:
        
        slt $t0,$s3, $s1                 #t0: j<size TvF
        beq $t0,$zero,EndInnerWhileLoop  # j>=size, we out this hoe
        
        #----A[i]==A[j]-----
        sll $t1,$s2, 2                   #t1: i*4 (offset)
        sll $t2,$s3, 2                   #t2: j*4 (offset)
        
        add $t1, $t1, $s0                #t1:address of A[i]
        add $t2, $t2, $s0                #t2:address of A[j]
        
        lw $t1, 0($t1)                   #t1: value of A[i]
        lw $t2, 0($t2)                   #t2: value of A[j]

#if statement
        bne $t1, $t2, Else               #A[i]=!A[j] we out this hoe
        add $s4, $zero, $s3              #k=j+0
        addi $t3, $s1, -1                #t3=size-1
        
ForLoop:
        slt $t0, $s4, $t3                #t0=k<size-1
        beq $t0, $zero, endForLoop       #k>=size-1 we out this hoe
        
        sll $t1, $s4, 2                  #t1: k*4 (offset)
        add $t1, $t1, $s0                #t2: location of A[K]
        
        addi $t2, $s4, 1                 #t2: k+1
        sll $t2, $t2, 2                  #t2: (k+1) * 4 (offset)
        add $t2, $t2, $s0                #location of A[K+1]
        
        lw $t2, 0($t2)                   #t2=A[K+1]
        sw $t2, 0($t1)                   #A[k]=A[k+1]
        
        addi $s4, $s4, 1                 #k++
        j ForLoop                        #jump to the ForLoop
        
endForLoop:
        add $s1, $zero, $t3              #size=size-1, reusing t3 register which it already has that value
        j InnerWhileLoop                 #jump to the InnerWhileLoop
        
Else:
        addi $s3, $s3, 1                 #j++
        j InnerWhileLoop                 #jump to the InnerwhileLoop
        
EndInnerWhileLoop:
        addi $s2, $s2, 1                 #i++
        j OutterWhileLoop                #jump to the OuterWhileLoop

Exit:
