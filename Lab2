
#-------------------------------------
#s0 reserved for pointer address
#s1 reserved for array size
#s2 reserved for i
#s3 reserved for j
#s4 reserved for k
#s5 reserved for value 1, for add

#initalizing s5=1
addi $s5, $zero, 1

#initalizing i = 0
addi $s2, $zero, 0

OutterWhileLoop:
slt $t0, $s2, $s1 #i<size TvF
beq $t0, $zero, Exit # i>=size, we out this hoe

#j=i+1
add $s3, $s2, $s5

InnerWhileLoop:

slt $t0,$s3, $s1 #j<size TvF
beq $t0,$zero,EndInnerWhileLoop  # j>=size, we out this hoe

#A[i]==A[j]
sll $t1,$s2, 2 #i*4 for offset
sll $t2,$s3, 2 #j*4 for offset

add $t1, $t1, $s0 #adrress of i
add $t2, $t2, $s0 #adress of j

lw $t1, 0($t1) #A[i]=t1
lw $t2, 0($t2) #A[j]=t2

bne $t1, $t2, Else  #A[i]=!A[j] we out this hoe
add $s4, $zero, $s3 #k=j+0
sub $t3, $s1, $s5 #t1=size-1


ForLoop:
slt $t0, $s4, $t3 #t0=k<size-1
beq $t0, $zero, endForLoop #k>=size-1 we out this hoe

sll $t1, $s4, 2 #address A[k]
add $t1, $t1, $s0 #location of A[K]

add $t2, $s4, $s5 #k+1=s2
sll $t2, $t2, 2 #offset of k+1
add $t2, $t2, $s0 #address of A[K+1]


lw $t2, 0($t2)
sw $t2, 0($t1) #A[k]=A[k+1]

add $s4, $s4, $s5 #k++
j ForLoop

endForLoop:
sub $s1, $s1, $s5
j InnerWhileLoop

Else:
add $s3, $s3, $s5 #j++
j InnerWhileLoop

EndInnerWhileLoop:
add $s2, $s2, $s5 #i++
j OutterWhileLoop

Exit:



